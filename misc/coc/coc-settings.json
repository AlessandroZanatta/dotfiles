{
  "coc.preferences.formatOnSaveFiletypes": [
    "python",
    "json",
    "ocaml",
    "yaml",
    "cmake",
    "verilog",
    "systemverilog",
    "rust",
    "javascript",
    "sql",
    "bash",
    "sh",
    "css",
    "scss",
    "c",
    "cpp",
    "lua",
    "markdown"
  ],
  "yaml.format.enable": true,
  // Python formatter
  "python.formatting.provider": "black",
  "stylua.styluaPath": "/usr/bin/stylua",
  "stylua.configPath": "/home/kalex/.config/nvim/.stylua.toml",
  "languageserver": {
    // OCaml
    "ocaml": {
      "command": "ocamllsp",
      "rootPatterns": [
        "dune-project"
      ],
      "filetypes": [
        "ocaml"
      ],
      "initializationOptions": {},
      "settings": {}
    },
    // System verilog
    "veridian": {
      "command": "veridian",
      "filetypes": [
        "systemverilog",
        "verilog"
      ]
    },
    // C/C++
    "ccls": {
      "command": "ccls",
      "filetypes": [
        "c",
        "cc",
        "cpp",
        "c++",
        "objc",
        "objcpp"
      ],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls"
        },
        "client": {
          "snippetSupport": true
        }
      }
    }
    // Haskell LS
    // "haskell": {
    //   "command": "haskell-language-server-wrapper",
    //   "args": [
    //     "--lsp"
    //   ],
    //   "rootPatterns": [
    //     ".stack.yaml",
    //     ".hie-bios",
    //     "BUILD.bazel",
    //     "cabal.config",
    //     "package.yaml"
    //   ],
    //   "filetypes": [
    //     "hs",
    //     "lhs",
    //     "haskell"
    //   ]
    // }
  },
  "diagnostic-languageserver.filetypes": {
    // lint `sh` (includes `bash`) files
    "sh": "shellcheck"
  },
  "diagnostic-languageserver.formatFiletypes": {
    // format `sh` (includes `bash`) files using formatter defined below
    "sh": "shfmt"
  },
  "diagnostic-languageserver.formatters": {
    // define our formatter so that we can reference it from
    // `diagnostic-languageserver.formatFiletypes`
    "shfmt": {
      "command": "shfmt",
      // all the below args are entirely optional
      // primarily listed here to call out that flags which take an
      // argument (such as `-i <num-spaces>` for specifying indentation)
      // should be split into two strings, the flag and then the value
      "args": [
        "-i",
        "2",
        "-bn",
        "-ci",
        "-sr"
      ]
    }
  }
}
